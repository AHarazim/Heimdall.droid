{"name":"Heimdall.droid","tagline":"Easy to use OAuth 2 library for Android.","body":"# <img src=\"https://cloud.githubusercontent.com/assets/460060/8159821/b8bfeb32-136a-11e5-83ed-83b7fe01df3a.jpg\" width=\"30\" height=\"30\"> Heimdall\r\n\r\nHeimdall is an [OAuth 2.0](https://tools.ietf.org/html/rfc6749) client specifically designed for easy usage and high flexibility. It supports all grants as described in [Section 4](https://tools.ietf.org/html/rfc6749#section-4) as well as refreshing an access token as described in [Section 6](https://tools.ietf.org/html/rfc6749#section-6) of the [The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749) specification.\r\n\r\nThis library makes use of [RxAndroid](https://github.com/ReactiveX/RxAndroid). Therefore you should be familar with [Observables](https://github.com/ReactiveX/RxJava/wiki/Observable).\r\n\r\nIf you are an iOS Developer then please take a look at the [Swift version of Heimdall](https://github.com/rheinfabrik/Heimdall.swift).\r\n\r\n## Installation\r\n\r\nHeimdall is ready to be used via [jitpack.io](https://jitpack.io/#rheinfabrik/Heimdall.droid).\r\nSimply add the following code to your root `build.gradle`:\r\n\r\n```groovy\r\nallprojects {\r\n    repositories {\r\n        jcenter()\r\n        maven { url \"https://jitpack.io\" }\r\n    }\r\n}\r\n```\r\n\r\nNow add the gradle dependency in your application's `build.gradle`:\r\n\r\n```groovy\r\ndependencies {\r\n    compile 'com.github.rheinfabrik:Heimdall.droid:{latest_version}'\r\n}\r\n```\r\n\r\n## Examples\r\n\r\nHeimdall's main class is the `OAuth2AccessTokenManager`. It is responsible for retrieving a new access token and keeping it valid by refreshing it.\r\n\r\nIn order to initialize an `OAuth2AccessTokenManager` instance, you need to pass an object implementing the `OAuth2AccessTokenStorage` interface. You can use the predefined `SharedPreferencesOAuth2AccessTokenStorage` if it suits your needs. Make sure that your `OAuth2AccessTokenStorage` is as secure as possible!\r\n\r\n```java \r\n\r\nSharedPreferencesOAuth2AccessTokenStorage<OAuth2AccessToken> storage = new SharedPreferencesOAuth2AccessTokenStorage<>(mySharedPreferences, OAuth2AccessToken.class);\r\nOAuth2AccessTokenManager<> manager = new OAuth2AccessTokenManager<OAuth2AccessToken>(storage);\r\n\r\n```\r\n\r\nOn your manager instance you can now call `grantNewAccessToken(grant)` to receive a new access token. The grant instance you pass must implement the `OAuth2Grant` interface and your actual server call. \r\n\r\nHere is an example of an `OAuth2ResourceOwnerPasswordCredentialsGrant`.\r\n\r\n```java \r\npublic class MyOAuth2Grant extends OAuth2ResourceOwnerPasswordCredentialsGrant<OAuth2AccessToken> {\r\n\r\n    // Constructor\r\n\r\n    @Override\r\n    public Observable<OAuth2AccessToken> grantNewAccessToken() {\r\n        // Create the network request based on the username, the password and the grant type.\r\n        // You can use Retrofit to make things easier.\r\n    }\r\n}\r\n```\r\n\r\nYour manager instance also has a method called `getValidAccessToken(refreshGrant)`. This is probably the main reason we build this library. It firstly checks if the stored access token is expired and then either emits the unexpired one or refreshs it if it is expired using the passed refresh grant. \r\n\r\nHere is an example of an `OAuth2RefreshAccessTokenGrant`.\r\n\r\n```java\r\npublic class MyOAuth2Grant extends OAuth2RefreshAccessTokenGrant<OAuth2AccessToken> {\r\n\r\n    // Constructor\r\n\r\n    @Override\r\n    public Observable<OAuth2AccessToken> grantNewAccessToken() {\r\n        // Create the network request based on the grant type and the refresh token.\r\n        // You can use Retrofit to make things easier.\r\n    }\r\n}\r\n```\r\n\r\nMostly you will use the `OAuth2AuthorizationCodeGrant` to authorize the user via a third party service such as Trakt.tv.\r\n\r\nThe implemention of a grant authorizing with Trakt.tv might look as following:\r\n\r\n```java\r\npublic final class TraktTVAuthorizationCodeGrant extends OAuth2AuthorizationCodeGrant<OAuth2AccessToken> {\r\n\r\n    public String clientSecret;\r\n\r\n    @Override\r\n    public Uri buildAuthorizationUri() {\r\n        return Uri.parse(\"https://trakt.tv/oauth/authorize\")\r\n                .buildUpon()\r\n                .appendQueryParameter(\"client_id\", clientId)\r\n                .appendQueryParameter(\"redirect_uri\", redirectUri)\r\n                .appendQueryParameter(\"response_type\", RESPONSE_TYPE).build();\r\n    }\r\n\r\n    @Override\r\n    public Observable<OAuth2AccessToken> exchangeTokenForCode(String code) {\r\n        // Create the network request based on the grant type, clientSecret and the retrieved code.\r\n        // You can use Retrofit to make things easier.\r\n    }\r\n}\r\n```\r\n\r\nUsing that grant with an Android WebView might look like this (please note that we use [Retrolambda](https://github.com/evant/gradle-retrolambda) here):\r\n\r\n```java\r\n// Create the grant\r\nTraktTVAuthorizationCodeGrant grant = new TraktTVAuthorizationCodeGrant();\r\ngrant.clientSecret = \"secret\"\r\ngrant.clientId = \"id\"\r\ngrant.redirectUri = \"uri\"\r\n\r\n// Set up web view loading\r\nwebView.setWebViewClient(new WebViewClient() {\r\n \t\r\n \t@Override\r\n    public void onPageFinished(WebView view, String url) {\r\n    \tsuper.onPageFinished(view, url);\r\n\r\n\t\t// Tell the grant we loaded an url\r\n        grant.onUrlLoadedCommand.onNext(Uri.parse(url));\r\n    }\r\n});\r\n\r\n// Load the authorization url once build\r\ngrant.authorizationUri()\r\n    .map(Uri::parse)\r\n\t.observeOn(AndroidSchedulers.mainThread())\r\n\t.subscribe(myWebView::load)\r\n\r\n// Start the authorization process\r\ngrant.grantNewAccessToken()\r\n\t.subscrive(token -> Log.d(\"Heimdall\", \"New token: \" + token))\r\n\r\n```\r\n\r\n## Sample Application\r\n\r\nPlease also check out our sample application which performs an authorization against [trakt.tv](https://trakt.tv/) and displays a simple list of the user's watchlists.\r\n\r\n**Note:** In order to build the sample by yourself you have to [create a new application on trakt.tv](https://trakt.tv/oauth/applications/new) and add the credentials wherever `TraktTvAPIConfiguration.java` is used.\r\n\r\n\r\n## About\r\n\r\nHeimdall was built by [Rheinfabrik](http://www.rheinfabrik.de) :factory:\r\n\r\n## License\r\n\r\nHeimdall is licensed under Apache Version 2.0.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}